plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.compose.compiler)
    alias(libs.plugins.ksp)
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
}

// Git 태그에서 버전 정보를 가져오는 함수
def getVersionFromGit() {
    try {
        // 현재 태그 가져오기 (정확히 현재 커밋의 태그)
        def currentTag = 'git describe --exact-match --tags HEAD'.execute().text.trim()
        if (currentTag) {
            // v1.0 -> 1.0으로 변환
            return currentTag.startsWith('v') ? currentTag.substring(1) : currentTag
        }
    } catch (Exception ignored) {
        // 현재 커밋에 태그가 없으면 가장 최근 태그 + 커밋 수 가져오기
        try {
            def tagInfo = 'git describe --tags --abbrev=0'.execute().text.trim()
            def commitCount = 'git rev-list --count HEAD'.execute().text.trim()
            def shortHash = 'git rev-parse --short HEAD'.execute().text.trim()

            if (tagInfo) {
                def baseVersion = tagInfo.startsWith('v') ? tagInfo.substring(1) : tagInfo
                return "${baseVersion}-dev.${commitCount}.${shortHash}"
            }
        } catch (Exception e2) {
            // Git이 없거나 태그가 없으면 기본값 사용
        }
    }
    return "1.0"
}

// Git 태그에서 버전 코드 생성 (태그의 마이너 버전 + 커밋 수)
def getVersionCodeFromGit() {
    try {
        def commitCount = 'git rev-list --count HEAD'.execute().text.trim()
        return commitCount.toInteger()
    } catch (Exception ignored) {
        return 1
    }
}

android {
    namespace 'com.inik.camcon'
    compileSdk 35

    // 키스토어 설정 로드
    def keystorePropertiesFile = rootProject.file("key.properties")
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    defaultConfig {
        applicationId "com.inik.camcon"
        minSdk 29
        targetSdk 35
        versionCode getVersionCodeFromGit()
        versionName getVersionFromGit()
        ndk {
            abiFilters "arm64-v8a"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 지원하는 언어 설정
        resConfigs "en", "ko", "it", "fr", "de", "ja"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
//            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            signingConfig signingConfigs.release  // 릴리즈 키스토어 사용
            // 개발자 기능 표시 (라이브뷰, PTPIP)
            buildConfigField "boolean", "SHOW_DEVELOPER_FEATURES", "true"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true  // 로그 확인을 위해 활성화
            signingConfig signingConfigs.release
            // 개발자 기능 숨김 (라이브뷰, PTPIP)
            buildConfigField "boolean", "SHOW_DEVELOPER_FEATURES", "false"
        }

        // 릴리즈 성능 + 디버깅 가능한 빌드 타입
        releaseDebug {
            initWith release
            debuggable true
//            applicationIdSuffix ".release.debug"
            versionNameSuffix "-release-debug"
            matchingFallbacks = ['release', 'debug']
            // 개발자 기능 표시 (디버깅용)
            buildConfigField "boolean", "SHOW_DEVELOPER_FEATURES", "true"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    android.buildTypes.all { buildType ->
        externalNativeBuild.cmake {
            if (buildType.name == 'debug') {
                arguments '-DCMAKE_BUILD_TYPE=Debug'
            } else if (buildType.name == 'releaseDebug') {
                arguments '-DCMAKE_BUILD_TYPE=RelWithDebInfo'
            } else {
                arguments '-DCMAKE_BUILD_TYPE=Release'
            }
            cFlags '-g'
            cppFlags '-g'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    buildFeatures {
        viewBinding true
        compose true
        buildConfig true
    }
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += [
                "-opt-in=androidx.compose.material.ExperimentalMaterialApi",
                "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api",
                "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi"
        ]
    }
    packaging {
        jniLibs {
            useLegacyPackaging = true
            keepDebugSymbols += ['**/*.so']
        }
    }
}

// KSP configuration for better performance
ksp {
    arg("dagger.hilt.shareTestComponents", "true")
    arg("dagger.fastInit", "enabled")
    arg("dagger.formatGeneratedSource", "disabled")
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.activity
    implementation "androidx.compose.material3:material3:1.1.2"
    implementation "androidx.compose.material3:material3-window-size-class:1.1.2"
    implementation "androidx.compose.material3:material3-adaptive:1.0.0-alpha06"
    implementation "androidx.compose.runtime:runtime-livedata:1.5.4"
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    //hilt
    implementation libs.hilt.android
    implementation 'androidx.hilt:hilt-navigation-compose:1.2.0'
    ksp libs.hilt.compiler

    // 코루틴
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3'
    // Firebase await() 사용

    implementation "com.google.android.material:material:1.7.0"

    // Jetpack Compose dependencies
    implementation "androidx.compose.ui:ui:1.5.4"
    implementation "androidx.compose.material:material:1.5.4"
    implementation "androidx.compose.material:material-icons-core:1.5.4"
    implementation "androidx.compose.material:material-icons-extended:1.5.4"
    implementation "androidx.compose.ui:ui-tooling-preview:1.5.4"
    debugImplementation "androidx.compose.ui:ui-tooling:1.5.4"
    implementation "androidx.activity:activity-compose:1.10.1"
    implementation("androidx.activity:activity-ktx:1.10.1")

    // Navigation Compose
    implementation "androidx.navigation:navigation-compose:2.7.7"

    // 소셜 로그인 - 구글만 사용
    implementation 'com.google.android.gms:play-services-auth:21.0.0' // 구글 로그인
    implementation platform('com.google.firebase:firebase-bom:33.4.0')
    implementation 'com.google.firebase:firebase-auth-ktx'

    // DataStore for preferences
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    //
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.32.0"

    // Image loading
    implementation "io.coil-kt:coil-compose:2.5.0"

    // HorizontalPager for photo swiping
    implementation "androidx.compose.foundation:foundation:1.5.4"

    implementation("com.google.firebase:firebase-auth")
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation("androidx.credentials:credentials:1.3.0")
    implementation("androidx.credentials:credentials-play-services-auth:1.3.0")
    implementation("com.google.android.libraries.identity.googleid:googleid:1.1.1")
    implementation 'com.google.firebase:firebase-messaging-ktx'
    // ExifInterface for preserving image metadata
    implementation "androidx.exifinterface:exifinterface:1.4.1"
    // GPUImage for color transfer and image processing
    implementation 'jp.co.cyberagent.android:gpuimage:2.1.0'
    // 0xZhangKe ImageViewer library for advanced image viewing
    implementation 'com.github.0xZhangKe:ImageViewer:1.0.3'
    // 기본 Compose 제스처를 사용한 이미지 뷰어 구현

    // ZoomImage with Coil integration for Compose - 최신 버전 사용
    implementation "io.github.panpf.zoomimage:zoomimage-compose-coil2:1.4.0-beta04"

    // GPUImage for image processing
    implementation 'jp.co.cyberagent.android:gpuimage:2.1.0'

    // ExifInterface for metadata handling
    implementation 'androidx.exifinterface:exifinterface:1.3.7'

    // Gson for JSON serialization
    implementation 'com.google.code.gson:gson:2.10.1'

    // Google Play Billing for subscription management
    implementation 'com.android.billingclient:billing-ktx:6.1.0'

    // Toasty for showing stylish notifications
    implementation 'com.github.GrenderG:Toasty:1.5.2'

    // Firebase Remote Config for app update management
    implementation 'com.google.firebase:firebase-config-ktx'

    // HTTP client for version checking (backup method)
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
}

// 커스텀 빌드 태스크들
task buildDebug(type: GradleBuild) {
    description = '디버그 모드로 빌드 및 설치'
    tasks = ['assembleDebug', 'installDebug']
}

task buildRelease(type: GradleBuild) {
    description = '릴리즈 모드로 빌드'
    tasks = ['assembleRelease']
}

task buildReleaseDebug(type: GradleBuild) {
    description = '릴리즈 성능 + 디버깅 가능 모드로 빌드 및 설치'
    tasks = ['assembleReleaseDebug', 'installReleaseDebug']
}

task runDebug(type: Exec) {
    description = '디버그 앱 실행'
    dependsOn 'installDebug'
    commandLine 'adb', 'shell', 'am', 'start', '-n', 'com.inik.camcon.debug/.presentation.ui.MainActivity'
}

task runRelease(type: Exec) {
    description = '릴리즈 앱 실행'
    dependsOn 'installRelease'
    commandLine 'adb', 'shell', 'am', 'start', '-n', 'com.inik.camcon/.presentation.ui.MainActivity'
}

task runReleaseDebug(type: Exec) {
    description = '릴리즈 디버그 앱 실행'
    dependsOn 'installReleaseDebug'
    commandLine 'adb', 'shell', 'am', 'start', '-n', 'com.inik.camcon/.presentation.ui.MainActivity'
}
