name: Sync to Public Repository

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  sync:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Clone public repository
        run: |
          git clone https://${{ secrets.PUBLIC_REPO_TOKEN }}@github.com/INI-K/CamCon_Pub.git public_repo
          cd public_repo
          git remote add private ${{ github.server_url }}/${{ github.repository }}.git

      - name: Sync files from private to public
        run: |
          cd public_repo
          
          # 현재 퍼블릭 레포지토리의 main 브랜치를 확인
          git checkout main || git checkout -b main
          
          # 프라이빗 레포지토리의 변경사항을 임시 브랜치로 가져오기
          git remote set-url private https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch private
          
          # 프라이빗 레포지토리의 파일들을 복사 (제외 파일들 빼고)
          git checkout private/${{ github.ref_name }} -- . || git checkout private/main -- .
          
          # 제외할 파일들과 디렉토리들 삭제
          rm -rf app/src/main/cpp/ || true
          rm -rf app/src/main/jniLibs/ || true
          rm -rf Complete_arm64-v8a/ || true
          rm -rf Key/ || true
          rm -f key.properties || true
          rm -f app/google-services.json || true
          rm -f local.properties || true
          rm -f build_libgphoto2.sh || true
          rm -rf app/release/ || true
          rm -f *.log || true
          rm -f kapt_error.log || true
          rm -f build.log || true
          
          # .gitignore 파일 생성/업데이트
          cat > .gitignore << 'EOF'
          # 네이티브 코드 제외
          app/src/main/cpp/
          app/src/main/jniLibs/
          Complete_arm64-v8a/
          
          # 드라이버 및 네이티브 라이브러리 파일들 제외
          *.so
          *.so.*
          *.a
          *.la
          
          # 빌드 스크립트 제외
          build_libgphoto2.sh
          
          # 키 파일들 제외 (보안)
          Key/
          key.properties
          app/google-services.json
          local.properties
          
          # 빌드 결과물 및 로그
          app/release/
          *.log
          kapt_error.log
          build.log
          
          # IDE 파일들
          .idea/
          *.iml
          
          # Android 빌드 파일들
          .gradle/
          build/
          captures/
          .externalNativeBuild/
          .cxx/
          EOF

      - name: Create README for public repository
        run: |
          cd public_repo
          
          # 퍼블릭 버전용 README 생성
          cat > README_PUBLIC.md << 'EOF'
          # CamCon - 퍼블릭 버전
          
          이 레포지토리는 CamCon 프로젝트의 퍼블릭 버전입니다.
          
          ## ⚠️ 주의사항
          - 이 버전에는 네이티브 코드와 드라이버 파일이 제외되어 있습니다
          - 완전한 빌드를 위해서는 별도의 네이티브 라이브러리가 필요합니다
          - 자동으로 프라이빗 레포지토리와 동기화됩니다
          
          ## 🚫 제외된 파일들
          - `app/src/main/cpp/`: C++ 네이티브 코드
          - `app/src/main/jniLibs/`: JNI 라이브러리 파일들
          - `Complete_arm64-v8a/`: ARM64 라이브러리
          - `Key/`: 키 파일들 (보안)
          - 드라이버 관련 스크립트 및 설정 파일들
          - 빌드 결과물 및 로그 파일들
          
          ## 📁 포함된 파일들
          - Android 애플리케이션 소스코드 (Java/Kotlin)
          - UI 리소스 및 레이아웃
          - 설정 파일들 (민감하지 않은 파일들만)
          - 문서 및 README
          
          ## 🔄 동기화 정보
          - 자동 동기화: main, develop 브랜치 푸시 시
          - 마지막 동기화: $(date '+%Y-%m-%d %H:%M:%S UTC')
          - 원본 레포지토리: 프라이빗 저장소에서 관리
          
          ## 📝 라이선스
          원본 프로젝트의 라이선스를 따릅니다.
          EOF
          
          # 기존 README가 있다면 백업
          if [ -f README.md ] && ! grep -q "퍼블릭 버전" README.md; then
            mv README.md README_ORIGINAL.md
          fi
          mv README_PUBLIC.md README.md

      - name: Commit and push changes
        run: |
          cd public_repo
          
          # 변경사항이 있는지 확인
          git add .
          
          if [ -n "$(git status --porcelain)" ]; then
            # 커밋 메시지 생성
            COMMIT_MSG="Sync from private repository
          
            - 동기화 날짜: $(date '+%Y-%m-%d %H:%M:%S UTC')
            - 소스 브랜치: ${{ github.ref_name }}
            - 커밋 SHA: ${{ github.sha }}
            - 제외된 파일: 네이티브 코드, 드라이버, 민감한 설정 파일들"
          
            git commit -m "$COMMIT_MSG"
          
            # 퍼블릭 레포지토리에 푸시
            git push origin main
          
            echo "✅ 퍼블릭 레포지토리 동기화 완료"
          else
            echo "ℹ️ 동기화할 변경사항이 없습니다"
          fi

      - name: Create or update sync status
        run: |
          cd public_repo
          
          # 동기화 상태 파일 생성
          mkdir -p .github
          cat > .github/SYNC_STATUS.md << EOF
          # 동기화 상태
          
          ## 마지막 동기화 정보
          - **날짜**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          - **소스 브랜치**: ${{ github.ref_name }}
          - **커밋 SHA**: ${{ github.sha }}
          - **워크플로**: ${{ github.workflow }}
          - **실행 번호**: ${{ github.run_number }}
          
          ## 제외된 항목들
          - 네이티브 C++ 코드 (`app/src/main/cpp/`)
          - JNI 라이브러리들 (`app/src/main/jniLibs/`)
          - ARM64 라이브러리 (`Complete_arm64-v8a/`)
          - 보안 키 파일들 (`Key/`, `key.properties` 등)
          - 빌드 결과물 및 로그
          
          ## 동기화 규칙
          - main 브랜치 푸시 시 자동 동기화
          - develop 브랜치 푸시 시 자동 동기화
          - Pull Request가 main에 머지될 때 동기화
          
          ---
          *이 파일은 자동으로 생성됩니다.*
          EOF
          
          git add .github/SYNC_STATUS.md
          git commit -m "Update sync status - $(date '+%Y-%m-%d %H:%M:%S')" || true
          git push origin main || true